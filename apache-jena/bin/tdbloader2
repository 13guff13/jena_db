#!/bin/sh
## Licensed to the Apache Software Foundation (ASF) under one
## or more contributor license agreements.  See the NOTICE file
## distributed with this work for additional information
## regarding copyright ownership.  The ASF licenses this file
## to you under the Apache License, Version 2.0 (the
## "License"); you may not use this file except in compliance
## with the License.  You may obtain a copy of the License at
##
##     http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.

function printUsage() {
  cat << EOF
tdbloader2 - TDB Bulk Loader

Usage: tdbloader2 --loc <Directory> [Options] <Data> ...

Bulk loader for TDB which manipulates the data files directly and so
can only be used to create new databases.  This command relies on
POSIX utilities so will only work on POSIX operating systems.

If you wish to bulk load to an existing database please use tdbloader
instead.

Required options are as follows:

  -l <DatabaseDirectory>
  --loc <DatabaseDirectory>
    Sets the location in which the database should be created.

    This location must be a directory and must be empty, if a
    non-existent path is specified it will be created as a new
    directory.

  <Data>
    Specifies the path to one/more data files to load

Common additional options are as follows:

  -h
  --help
    Prints this help summary and exits

Advanced additional options are as follows:

  -d
  --debug
    Enable debug mode, adds extra debug output

  -k
  --keep-work
    Keeps the temporary work files around after they are no longer
    needed.  May be useful for debugging.

  -p <Phase>
  --phase <Phase>
    Sets the phase of the build to run, supported values are:

      all      Full bulk load
      data     Data phase only
      index    Index phase only, requires the data phase to
               previously have been run

    When no phase is specified it defaults to all

  -t
  --trace
    Enable trace mode, essentially sets -x within the scripts

EOF
}

# If JENA_HOME is empty
if [ -z "$JENA_HOME" ]
	then
    SCRIPT="$0"
    # Catch common issue: script has been symlinked
	if [ -L "$SCRIPT" ]
		then
		SCRIPT="$(readlink "$0")"
		# If link is relative
		case "$SCRIPT" in
   			/*) ;; # fine
			*) SCRIPT=$( dirname "$0" )/$SCRIPT;; # fix
		esac
	fi

    # Work out root from script location
    JENA_HOME="$( cd "$( dirname "$SCRIPT" )/.." && pwd )"
fi

# ---- Setup
JVM_ARGS=${JVM_ARGS:--Xmx1024M}
# Expand JENA_HOME but literal *
JENA_CP="$JENA_HOME"'/lib/*'
SOCKS=
LOGGING="-Dlog4j.configuration=file:$JENA_HOME/jena-log4j.properties"

# Platform specific fixup
#??On CYGWIN convert path and end with a ';' 
case "$(uname)" in
   CYGWIN*) JENA_CP="$(cygpath -wp "$JENA_CP");";;
esac

export JENA_CP
# echo JENA_CP
if [ -z "$SORT_ARGS" ]; then
    SORT_ARGS="--buffer-size=50%"
    sort --parallel=3 < /dev/null 2>/dev/null
    if [ $? = 0 ]; then
    	SORT_ARGS="$SORT_ARGS --parallel=3"
    fi
fi
export SORT_ARGS

# Process arguments
LOC=
PHASE=
KEEP_WORK=0
DEBUG=0
TRACE=0

while [ $# -gt 0 ]
do
  ARG=$1
  case "$ARG" in
    -d|--debug)
      # Debug Mode
      shift
      DEBUG=1
      ;;
    -h|--help)
      # Help
      printUsage
      exit 0
      ;;
    -k|--keep-work)
      # Keep work files
      shift
      KEEP_WORK=1
      ;;
    -l|--loc|-loc)
      # Location space separated
      shift
      LOC="$1"
      shift
      ;;
    -*loc=*)
      # Location = separated
      LOC=${ARG/-*loc=/}
      shift
      ;;
    -p|--phase)
      # Phase space separated
      shift
      PHASE="$1"
      shift
      ;;
    -t|--trace)
      # Trace mode
      shift
      TRACE=1
      set -x
      ;;
    *)
      # Once we see an unrecognized argument treat as start of files to process
      break
      ;;
  esac
done

if [ -z "$PHASE" ]; then
  PHASE="all"
fi
COMMON_ARGS=
if [ $KEEP_WORK = 1 ]; then
  COMMON_ARGS="--keep-work"
fi
if [ $DEBUG = 1 ]; then
  COMMON_ARGS="$COMMON_ARGS --debug"
fi
if [ $TRACE = 1 ]; then
  COMMON_ARGS="$COMMON_ARGS --trace"
fi

log() { echo " $(date $DATE)" "$@" ; }

#DATE="+%Y-%m-%dT%H:%M:%S%:z"
DATE="+%H:%M:%S"

# ---- Start
log "-- TDB Bulk Loader Start"
TIME1="$(date +%s)"

TOOL_DIR="$JENA_HOME/bin"
case "$PHASE" in
  all)
    exec "${TOOL_DIR}/tdbloader2data" $COMMON_ARGS --loc "$LOC" "$@"
    exec "${TOOL_DIR}/tdbloader2index" $COMMON_ARGS --loc "$LOC"
    ;;
  data)
    exec "${TOOL_DIR}/tdbloader2data" $COMMON_ARGS --loc "$LOC" "$@"
    ;;
  index)
    exec "${TOOL_DIR}/tdbloader2index" $COMMON_ARGS --loc "$LOC"
    ;;
  *)
    echo "Unrecognized phase $PHASE" 1>&2
    exit 1
    ;;
esac

# ---- End
TIME2="$(date +%s)"
log "-- TDB Bulk Loader Finish"
ELAPSED=$(($TIME2-$TIME1))
log "-- $ELAPSED seconds"